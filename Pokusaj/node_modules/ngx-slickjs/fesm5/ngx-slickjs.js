import { Injectable, ɵɵdefineInjectable, EventEmitter, Directive, ElementRef, NgZone, Inject, Input, Output, Host, InjectionToken, NgModule } from '@angular/core';
import { __spread, __assign } from 'tslib';
import compare from 'just-compare';
import { map, filter, switchMap, take, takeUntil } from 'rxjs/operators';
import { of, ReplaySubject, Subject, forkJoin, timer, fromEvent } from 'rxjs';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LazyLoadService = /** @class */ (function () {
    function LazyLoadService() {
        this._loadedLibraries = {};
    }
    /**
     * @param {?} url
     * @param {?} type
     * @return {?}
     */
    LazyLoadService.prototype.load = /**
     * @param {?} url
     * @param {?} type
     * @return {?}
     */
    function (url, type) {
        var _this = this;
        if (!url)
            return of(null);
        /** @type {?} */
        var key = url.slice(url.lastIndexOf("/") + 1);
        if (this._loadedLibraries[key]) {
            return this._loadedLibraries[key].asObservable();
        }
        this._loadedLibraries[key] = new ReplaySubject();
        /** @type {?} */
        var library = document.createElement(type === "script" ? "script" : "link");
        if (type === "script") {
            library.type = "text/javascript";
            ((/** @type {?} */ (library))).src = url;
        }
        else {
            library.type = "text/css";
            ((/** @type {?} */ (library))).rel = "stylesheet";
            ((/** @type {?} */ (library))).href = url;
        }
        library.onload = (/**
         * @return {?}
         */
        function () {
            _this._loadedLibraries[key].next();
            _this._loadedLibraries[key].complete();
        });
        document.body.appendChild(library);
        return this._loadedLibraries[key].asObservable();
    };
    LazyLoadService.decorators = [
        { type: Injectable, args: [{
                    providedIn: "root",
                },] }
    ];
    /** @nocollapse */ LazyLoadService.ngInjectableDef = ɵɵdefineInjectable({ factory: function LazyLoadService_Factory() { return new LazyLoadService(); }, token: LazyLoadService, providedIn: "root" });
    return LazyLoadService;
}());
if (false) {
    /** @type {?} */
    LazyLoadService.prototype._loadedLibraries;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SlickContainerDirective = /** @class */ (function () {
    function SlickContainerDirective(elRef, zone, lazyLoadService, links) {
        this.elRef = elRef;
        this.zone = zone;
        this.lazyLoadService = lazyLoadService;
        this.links = links;
        this.config = (/** @type {?} */ ({}));
        this.afterChange = new EventEmitter();
        this.beforeChange = new EventEmitter();
        this.breakpoint = new EventEmitter();
        this.destroy = new EventEmitter();
        this.init = new EventEmitter();
        this.slides = [];
        this.initialize = false;
        this.slickCount = 0;
        this.destroy$ = new Subject();
    }
    /**
     * @return {?}
     */
    SlickContainerDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.lazyLoadService
            .load(this.links.jquery, 'script')
            .pipe(map((/**
         * @return {?}
         */
        function () { return 'jQuery is loaded'; })), filter((/**
         * @param {?} jquery
         * @return {?}
         */
        function (jquery) { return !!jquery; })), switchMap((/**
         * @return {?}
         */
        function () {
            return forkJoin(_this.lazyLoadService.load(_this.links.slickJs, 'script'), _this.lazyLoadService.load(_this.links.slickCss, 'style'), _this.lazyLoadService.load(_this.links.slickThemeCss, 'style'));
        })), take(1))
            .subscribe((/**
         * @return {?}
         */
        function () {
            _this.initSlick();
        }));
    };
    /**
     * @return {?}
     */
    SlickContainerDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.unslick();
        this.slides = [];
        this.destroy$.next();
    };
    /**
     * @return {?}
     */
    SlickContainerDirective.prototype.initSlick = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var that = this;
        this.zone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            $(_this.elRef.nativeElement)[0].innerHTML = '';
            _this.jQueryElement = $(_this.elRef.nativeElement);
            _this.jQueryElement.on('init', (/**
             * @param {?} event
             * @param {?} slick
             * @return {?}
             */
            function (event, slick) {
                _this.zone.run((/**
                 * @return {?}
                 */
                function () {
                    timer(0).subscribe((/**
                     * @return {?}
                     */
                    function () {
                        _this.init.emit({ event: event, slick: slick });
                        if (_this.config && _this.config.initialSlide && _this.config.initialSlide <= _this.slides.length) {
                            _this.goTo(_this.config.initialSlide);
                        }
                    }));
                }));
            }));
            _this.jQueryElement.slick(_this.config);
            _this.initialize = true;
            _this.listenMouseWheel();
            _this.jQueryElement.on('afterChange', (/**
             * @param {?} event
             * @param {?} slick
             * @param {?} currentSlide
             * @return {?}
             */
            function (event, slick, currentSlide) {
                that.zone.run((/**
                 * @return {?}
                 */
                function () {
                    that.afterChange.emit({ event: event, slick: slick, currentSlide: currentSlide });
                }));
            }));
            _this.jQueryElement.on('beforeChange', (/**
             * @param {?} event
             * @param {?} slick
             * @param {?} currentSlide
             * @param {?} nextSlide
             * @return {?}
             */
            function (event, slick, currentSlide, nextSlide) {
                that.zone.run((/**
                 * @return {?}
                 */
                function () {
                    _this.slickCount = slick.slideCount;
                    that.beforeChange.emit({ event: event, slick: slick, currentSlide: currentSlide, nextSlide: nextSlide });
                }));
            }));
            _this.jQueryElement.on('breakpoint', (/**
             * @param {?} event
             * @param {?} slick
             * @param {?} breakpoint
             * @return {?}
             */
            function (event, slick, breakpoint) {
                that.zone.run((/**
                 * @return {?}
                 */
                function () {
                    that.breakpoint.emit({ event: event, slick: slick, breakpoint: breakpoint });
                }));
            }));
            _this.jQueryElement.on('destroy', (/**
             * @param {?} event
             * @param {?} slick
             * @return {?}
             */
            function (event, slick) {
                that.zone.run((/**
                 * @return {?}
                 */
                function () {
                    that.destroy.emit({ event: event, slick: slick });
                }));
            }));
        }));
        this.syncSlides();
    };
    /**
     * @return {?}
     */
    SlickContainerDirective.prototype.syncSlides = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.slickCount >= this.slides.length)
            return;
        this.slides.forEach((/**
         * @param {?} slide
         * @return {?}
         */
        function (slide) {
            _this.zone.run((/**
             * @return {?}
             */
            function () {
                _this.jQueryElement.slick('slickAdd', slide);
            }));
        }));
    };
    /**
     * @param {?} slide
     * @return {?}
     */
    SlickContainerDirective.prototype.addSlide = /**
     * @param {?} slide
     * @return {?}
     */
    function (slide) {
        var _this = this;
        this.slides = __spread(this.slides, [slide]);
        if (!this.initialize)
            return;
        this.zone.run((/**
         * @return {?}
         */
        function () {
            _this.jQueryElement.slick('slickAdd', slide);
        }));
    };
    /**
     * @param {?} slide
     * @return {?}
     */
    SlickContainerDirective.prototype.removeSlide = /**
     * @param {?} slide
     * @return {?}
     */
    function (slide) {
        var _this = this;
        this.slides = this.slides.filter((/**
         * @param {?} slide
         * @return {?}
         */
        function (slide) { return compare(slide, slide); }));
        if (!this.initialize)
            return;
        this.zone.run((/**
         * @return {?}
         */
        function () {
            _this.jQueryElement.slick('slickRemove', _this.slides.indexOf(slide));
        }));
    };
    /**
     * @param {?} index
     * @return {?}
     */
    SlickContainerDirective.prototype.goTo = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        var _this = this;
        this.zone.run((/**
         * @return {?}
         */
        function () {
            _this.jQueryElement.slick('slickGoTo', index);
        }));
    };
    /**
     * @return {?}
     */
    SlickContainerDirective.prototype.next = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.zone.run((/**
         * @return {?}
         */
        function () {
            _this.jQueryElement.slick('slickNext');
        }));
    };
    /**
     * @return {?}
     */
    SlickContainerDirective.prototype.prev = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.zone.run((/**
         * @return {?}
         */
        function () {
            _this.jQueryElement.slick('slickPrev');
        }));
    };
    /**
     * @return {?}
     */
    SlickContainerDirective.prototype.pause = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.zone.run((/**
         * @return {?}
         */
        function () {
            _this.jQueryElement.slick('slickPause');
        }));
    };
    /**
     * @return {?}
     */
    SlickContainerDirective.prototype.play = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.zone.run((/**
         * @return {?}
         */
        function () {
            _this.jQueryElement.slick('slickPlay');
        }));
    };
    /**
     * @return {?}
     */
    SlickContainerDirective.prototype.unslick = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.jQueryElement) {
            this.zone.run((/**
             * @return {?}
             */
            function () {
                _this.jQueryElement.slick('unslick');
            }));
        }
        this.initialize = false;
    };
    /**
     * @return {?}
     */
    SlickContainerDirective.prototype.listenMouseWheel = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.config.mouseWheelMove === false)
            return;
        fromEvent(this.elRef.nativeElement, 'wheel')
            .pipe(takeUntil(this.destroy$))
            .subscribe((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            event.preventDefault();
            if (event.deltaX > 0 || event.deltaY < 0) {
                _this.prev();
            }
            else if (event.deltaX < 0 || event.deltaY > 0) {
                _this.next();
            }
        }));
    };
    SlickContainerDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[slickContainer]',
                    exportAs: 'slick',
                },] }
    ];
    /** @nocollapse */
    SlickContainerDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone },
        { type: LazyLoadService },
        { type: undefined, decorators: [{ type: Inject, args: ['slick-links',] }] }
    ]; };
    SlickContainerDirective.propDecorators = {
        config: [{ type: Input, args: ['slickConfig',] }],
        afterChange: [{ type: Output, args: ['slickAfterChange',] }],
        beforeChange: [{ type: Output, args: ['slickBeforeChange',] }],
        breakpoint: [{ type: Output, args: ['slickBreakpoint',] }],
        destroy: [{ type: Output, args: ['slickDestroy',] }],
        init: [{ type: Output, args: ['slickInit',] }]
    };
    return SlickContainerDirective;
}());
if (false) {
    /** @type {?} */
    SlickContainerDirective.prototype.config;
    /** @type {?} */
    SlickContainerDirective.prototype.afterChange;
    /** @type {?} */
    SlickContainerDirective.prototype.beforeChange;
    /** @type {?} */
    SlickContainerDirective.prototype.breakpoint;
    /** @type {?} */
    SlickContainerDirective.prototype.destroy;
    /** @type {?} */
    SlickContainerDirective.prototype.init;
    /** @type {?} */
    SlickContainerDirective.prototype.slides;
    /** @type {?} */
    SlickContainerDirective.prototype.jQueryElement;
    /** @type {?} */
    SlickContainerDirective.prototype.initialize;
    /** @type {?} */
    SlickContainerDirective.prototype.slickCount;
    /**
     * @type {?}
     * @private
     */
    SlickContainerDirective.prototype.destroy$;
    /**
     * @type {?}
     * @private
     */
    SlickContainerDirective.prototype.elRef;
    /**
     * @type {?}
     * @private
     */
    SlickContainerDirective.prototype.zone;
    /**
     * @type {?}
     * @private
     */
    SlickContainerDirective.prototype.lazyLoadService;
    /**
     * @type {?}
     * @private
     */
    SlickContainerDirective.prototype.links;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SlickItemDirective = /** @class */ (function () {
    function SlickItemDirective(elRef, slickRef) {
        this.elRef = elRef;
        this.slickRef = slickRef;
    }
    /**
     * @return {?}
     */
    SlickItemDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.slickRef.addSlide(this.elRef.nativeElement);
    };
    /**
     * @return {?}
     */
    SlickItemDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.slickRef.removeSlide(this.elRef.nativeElement);
    };
    SlickItemDirective.decorators = [
        { type: Directive, args: [{
                    selector: "[slickItem]"
                },] }
    ];
    /** @nocollapse */
    SlickItemDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: SlickContainerDirective, decorators: [{ type: Host }] }
    ]; };
    return SlickItemDirective;
}());
if (false) {
    /** @type {?} */
    SlickItemDirective.prototype.elRef;
    /**
     * @type {?}
     * @private
     */
    SlickItemDirective.prototype.slickRef;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} links
 * @return {?}
 */
function linkOptionsFactory(links) {
    return (/** @type {?} */ (__assign({ jquery: "https://code.jquery.com/jquery-3.4.0.min.js", slickJs: "https://cdn.jsdelivr.net/npm/slick-carousel@1.8.1/slick/slick.min.js", slickCss: "https://cdn.jsdelivr.net/npm/slick-carousel@1.8.1/slick/slick.css", slickThemeCss: "https://cdn.jsdelivr.net/npm/slick-carousel@1.8.1/slick/slick-theme.css" }, links)));
}
/** @type {?} */
var SLICK_LINKS = new InjectionToken("slick-links");

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgxSlickJsModule = /** @class */ (function () {
    function NgxSlickJsModule() {
    }
    /**
     * @param {?=} __0
     * @return {?}
     */
    NgxSlickJsModule.forRoot = /**
     * @param {?=} __0
     * @return {?}
     */
    function (_a) {
        var _b = (_a === void 0 ? (/** @type {?} */ ({})) : _a).links, links = _b === void 0 ? {} : _b;
        return {
            ngModule: NgxSlickJsModule,
            providers: [
                {
                    provide: SLICK_LINKS,
                    useValue: links,
                },
                {
                    provide: "slick-links",
                    useFactory: linkOptionsFactory,
                    deps: [SLICK_LINKS],
                },
            ],
        };
    };
    NgxSlickJsModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [SlickContainerDirective, SlickItemDirective],
                    exports: [SlickContainerDirective, SlickItemDirective],
                },] }
    ];
    return NgxSlickJsModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var Options;
(function (Options) {
    /**
     * @record
     */
    function Root() { }
    Options.Root = Root;
    if (false) {
        /** @type {?} */
        Root.prototype.links;
    }
    /**
     * @record
     */
    function Links() { }
    Options.Links = Links;
    if (false) {
        /** @type {?|undefined} */
        Links.prototype.jquery;
        /** @type {?|undefined} */
        Links.prototype.slickJs;
        /** @type {?|undefined} */
        Links.prototype.slickCss;
        /** @type {?|undefined} */
        Links.prototype.slickThemeCss;
    }
})(Options || (Options = {}));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var Slick;
(function (Slick) {
    /**
     * @record
     */
    function Config() { }
    Slick.Config = Config;
    if (false) {
        /** @type {?|undefined} */
        Config.prototype.accessibility;
        /** @type {?|undefined} */
        Config.prototype.adaptiveHeight;
        /** @type {?|undefined} */
        Config.prototype.autoplay;
        /** @type {?|undefined} */
        Config.prototype.autoplaySpeed;
        /** @type {?|undefined} */
        Config.prototype.arrows;
        /** @type {?|undefined} */
        Config.prototype.asNavFor;
        /** @type {?|undefined} */
        Config.prototype.appendArrows;
        /** @type {?|undefined} */
        Config.prototype.appendDots;
        /** @type {?|undefined} */
        Config.prototype.prevArrow;
        /** @type {?|undefined} */
        Config.prototype.nextArrow;
        /** @type {?|undefined} */
        Config.prototype.centerMode;
        /** @type {?|undefined} */
        Config.prototype.centerPadding;
        /** @type {?|undefined} */
        Config.prototype.cssEase;
        /** @type {?|undefined} */
        Config.prototype.dots;
        /** @type {?|undefined} */
        Config.prototype.dotsClass;
        /** @type {?|undefined} */
        Config.prototype.draggable;
        /** @type {?|undefined} */
        Config.prototype.fade;
        /** @type {?|undefined} */
        Config.prototype.focusOnSelect;
        /** @type {?|undefined} */
        Config.prototype.easing;
        /** @type {?|undefined} */
        Config.prototype.edgeFriction;
        /** @type {?|undefined} */
        Config.prototype.infinite;
        /** @type {?|undefined} */
        Config.prototype.initialSlide;
        /** @type {?|undefined} */
        Config.prototype.lazyLoad;
        /** @type {?|undefined} */
        Config.prototype.mobileFirst;
        /** @type {?|undefined} */
        Config.prototype.pauseOnFocus;
        /** @type {?|undefined} */
        Config.prototype.pauseOnDotsHover;
        /** @type {?|undefined} */
        Config.prototype.respondTo;
        /** @type {?|undefined} */
        Config.prototype.responsive;
        /** @type {?|undefined} */
        Config.prototype.rows;
        /** @type {?|undefined} */
        Config.prototype.slidesPerRow;
        /** @type {?|undefined} */
        Config.prototype.slidesToShow;
        /** @type {?|undefined} */
        Config.prototype.slidesToScroll;
        /** @type {?|undefined} */
        Config.prototype.speed;
        /** @type {?|undefined} */
        Config.prototype.swipe;
        /** @type {?|undefined} */
        Config.prototype.swipeToSlide;
        /** @type {?|undefined} */
        Config.prototype.touchMove;
        /** @type {?|undefined} */
        Config.prototype.mouseWheelMove;
        /** @type {?|undefined} */
        Config.prototype.touchThreshold;
        /** @type {?|undefined} */
        Config.prototype.useCSS;
        /** @type {?|undefined} */
        Config.prototype.useTransform;
        /** @type {?|undefined} */
        Config.prototype.variableWidth;
        /** @type {?|undefined} */
        Config.prototype.vertical;
        /** @type {?|undefined} */
        Config.prototype.verticalSwiping;
        /** @type {?|undefined} */
        Config.prototype.rti;
        /** @type {?|undefined} */
        Config.prototype.waitForAnimate;
        /** @type {?|undefined} */
        Config.prototype.zIndex;
    }
    /**
     * @record
     */
    function ConfigResponsive() { }
    Slick.ConfigResponsive = ConfigResponsive;
    if (false) {
        /** @type {?} */
        ConfigResponsive.prototype.breakpoint;
        /** @type {?|undefined} */
        ConfigResponsive.prototype.settings;
    }
})(Slick || (Slick = {}));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { LazyLoadService, NgxSlickJsModule, SLICK_LINKS, SlickContainerDirective, SlickItemDirective, linkOptionsFactory, SlickContainerDirective as ɵa, LazyLoadService as ɵb, SlickItemDirective as ɵd, linkOptionsFactory as ɵe, SLICK_LINKS as ɵf };
//# sourceMappingURL=ngx-slickjs.js.map
