/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, Input, NgZone, Output, Inject } from '@angular/core';
import compare from 'just-compare';
import { take, map, filter, switchMap, takeUntil } from 'rxjs/operators';
import { timer, forkJoin, fromEvent, Subject } from 'rxjs';
import { LazyLoadService } from '../services/lazy-load.service';
export class SlickContainerDirective {
    /**
     * @param {?} elRef
     * @param {?} zone
     * @param {?} lazyLoadService
     * @param {?} links
     */
    constructor(elRef, zone, lazyLoadService, links) {
        this.elRef = elRef;
        this.zone = zone;
        this.lazyLoadService = lazyLoadService;
        this.links = links;
        this.config = (/** @type {?} */ ({}));
        this.afterChange = new EventEmitter();
        this.beforeChange = new EventEmitter();
        this.breakpoint = new EventEmitter();
        this.destroy = new EventEmitter();
        this.init = new EventEmitter();
        this.slides = [];
        this.initialize = false;
        this.slickCount = 0;
        this.destroy$ = new Subject();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.lazyLoadService
            .load(this.links.jquery, 'script')
            .pipe(map((/**
         * @return {?}
         */
        () => 'jQuery is loaded')), filter((/**
         * @param {?} jquery
         * @return {?}
         */
        jquery => !!jquery)), switchMap((/**
         * @return {?}
         */
        () => forkJoin(this.lazyLoadService.load(this.links.slickJs, 'script'), this.lazyLoadService.load(this.links.slickCss, 'style'), this.lazyLoadService.load(this.links.slickThemeCss, 'style')))), take(1))
            .subscribe((/**
         * @return {?}
         */
        () => {
            this.initSlick();
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.unslick();
        this.slides = [];
        this.destroy$.next();
    }
    /**
     * @return {?}
     */
    initSlick() {
        /** @type {?} */
        const that = this;
        this.zone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            $(this.elRef.nativeElement)[0].innerHTML = '';
            this.jQueryElement = $(this.elRef.nativeElement);
            this.jQueryElement.on('init', (/**
             * @param {?} event
             * @param {?} slick
             * @return {?}
             */
            (event, slick) => {
                this.zone.run((/**
                 * @return {?}
                 */
                () => {
                    timer(0).subscribe((/**
                     * @return {?}
                     */
                    () => {
                        this.init.emit({ event, slick });
                        if (this.config && this.config.initialSlide && this.config.initialSlide <= this.slides.length) {
                            this.goTo(this.config.initialSlide);
                        }
                    }));
                }));
            }));
            this.jQueryElement.slick(this.config);
            this.initialize = true;
            this.listenMouseWheel();
            this.jQueryElement.on('afterChange', (/**
             * @param {?} event
             * @param {?} slick
             * @param {?} currentSlide
             * @return {?}
             */
            (event, slick, currentSlide) => {
                that.zone.run((/**
                 * @return {?}
                 */
                () => {
                    that.afterChange.emit({ event, slick, currentSlide });
                }));
            }));
            this.jQueryElement.on('beforeChange', (/**
             * @param {?} event
             * @param {?} slick
             * @param {?} currentSlide
             * @param {?} nextSlide
             * @return {?}
             */
            (event, slick, currentSlide, nextSlide) => {
                that.zone.run((/**
                 * @return {?}
                 */
                () => {
                    this.slickCount = slick.slideCount;
                    that.beforeChange.emit({ event, slick, currentSlide, nextSlide });
                }));
            }));
            this.jQueryElement.on('breakpoint', (/**
             * @param {?} event
             * @param {?} slick
             * @param {?} breakpoint
             * @return {?}
             */
            (event, slick, breakpoint) => {
                that.zone.run((/**
                 * @return {?}
                 */
                () => {
                    that.breakpoint.emit({ event, slick, breakpoint });
                }));
            }));
            this.jQueryElement.on('destroy', (/**
             * @param {?} event
             * @param {?} slick
             * @return {?}
             */
            (event, slick) => {
                that.zone.run((/**
                 * @return {?}
                 */
                () => {
                    that.destroy.emit({ event, slick });
                }));
            }));
        }));
        this.syncSlides();
    }
    /**
     * @return {?}
     */
    syncSlides() {
        if (this.slickCount >= this.slides.length)
            return;
        this.slides.forEach((/**
         * @param {?} slide
         * @return {?}
         */
        slide => {
            this.zone.run((/**
             * @return {?}
             */
            () => {
                this.jQueryElement.slick('slickAdd', slide);
            }));
        }));
    }
    /**
     * @param {?} slide
     * @return {?}
     */
    addSlide(slide) {
        this.slides = [...this.slides, slide];
        if (!this.initialize)
            return;
        this.zone.run((/**
         * @return {?}
         */
        () => {
            this.jQueryElement.slick('slickAdd', slide);
        }));
    }
    /**
     * @param {?} slide
     * @return {?}
     */
    removeSlide(slide) {
        this.slides = this.slides.filter((/**
         * @param {?} slide
         * @return {?}
         */
        slide => compare(slide, slide)));
        if (!this.initialize)
            return;
        this.zone.run((/**
         * @return {?}
         */
        () => {
            this.jQueryElement.slick('slickRemove', this.slides.indexOf(slide));
        }));
    }
    /**
     * @param {?} index
     * @return {?}
     */
    goTo(index) {
        this.zone.run((/**
         * @return {?}
         */
        () => {
            this.jQueryElement.slick('slickGoTo', index);
        }));
    }
    /**
     * @return {?}
     */
    next() {
        this.zone.run((/**
         * @return {?}
         */
        () => {
            this.jQueryElement.slick('slickNext');
        }));
    }
    /**
     * @return {?}
     */
    prev() {
        this.zone.run((/**
         * @return {?}
         */
        () => {
            this.jQueryElement.slick('slickPrev');
        }));
    }
    /**
     * @return {?}
     */
    pause() {
        this.zone.run((/**
         * @return {?}
         */
        () => {
            this.jQueryElement.slick('slickPause');
        }));
    }
    /**
     * @return {?}
     */
    play() {
        this.zone.run((/**
         * @return {?}
         */
        () => {
            this.jQueryElement.slick('slickPlay');
        }));
    }
    /**
     * @return {?}
     */
    unslick() {
        if (this.jQueryElement) {
            this.zone.run((/**
             * @return {?}
             */
            () => {
                this.jQueryElement.slick('unslick');
            }));
        }
        this.initialize = false;
    }
    /**
     * @return {?}
     */
    listenMouseWheel() {
        if (this.config.mouseWheelMove === false)
            return;
        fromEvent(this.elRef.nativeElement, 'wheel')
            .pipe(takeUntil(this.destroy$))
            .subscribe((/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            event.preventDefault();
            if (event.deltaX > 0 || event.deltaY < 0) {
                this.prev();
            }
            else if (event.deltaX < 0 || event.deltaY > 0) {
                this.next();
            }
        }));
    }
}
SlickContainerDirective.decorators = [
    { type: Directive, args: [{
                selector: '[slickContainer]',
                exportAs: 'slick',
            },] }
];
/** @nocollapse */
SlickContainerDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone },
    { type: LazyLoadService },
    { type: undefined, decorators: [{ type: Inject, args: ['slick-links',] }] }
];
SlickContainerDirective.propDecorators = {
    config: [{ type: Input, args: ['slickConfig',] }],
    afterChange: [{ type: Output, args: ['slickAfterChange',] }],
    beforeChange: [{ type: Output, args: ['slickBeforeChange',] }],
    breakpoint: [{ type: Output, args: ['slickBreakpoint',] }],
    destroy: [{ type: Output, args: ['slickDestroy',] }],
    init: [{ type: Output, args: ['slickInit',] }]
};
if (false) {
    /** @type {?} */
    SlickContainerDirective.prototype.config;
    /** @type {?} */
    SlickContainerDirective.prototype.afterChange;
    /** @type {?} */
    SlickContainerDirective.prototype.beforeChange;
    /** @type {?} */
    SlickContainerDirective.prototype.breakpoint;
    /** @type {?} */
    SlickContainerDirective.prototype.destroy;
    /** @type {?} */
    SlickContainerDirective.prototype.init;
    /** @type {?} */
    SlickContainerDirective.prototype.slides;
    /** @type {?} */
    SlickContainerDirective.prototype.jQueryElement;
    /** @type {?} */
    SlickContainerDirective.prototype.initialize;
    /** @type {?} */
    SlickContainerDirective.prototype.slickCount;
    /**
     * @type {?}
     * @private
     */
    SlickContainerDirective.prototype.destroy$;
    /**
     * @type {?}
     * @private
     */
    SlickContainerDirective.prototype.elRef;
    /**
     * @type {?}
     * @private
     */
    SlickContainerDirective.prototype.zone;
    /**
     * @type {?}
     * @private
     */
    SlickContainerDirective.prototype.lazyLoadService;
    /**
     * @type {?}
     * @private
     */
    SlickContainerDirective.prototype.links;
}
//# sourceMappingURL=data:application/json;base64,