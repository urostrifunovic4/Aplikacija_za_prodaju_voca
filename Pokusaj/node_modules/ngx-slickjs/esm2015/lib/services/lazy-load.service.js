/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from "@angular/core";
import { ReplaySubject, of } from "rxjs";
import * as i0 from "@angular/core";
export class LazyLoadService {
    constructor() {
        this._loadedLibraries = {};
    }
    /**
     * @param {?} url
     * @param {?} type
     * @return {?}
     */
    load(url, type) {
        if (!url)
            return of(null);
        /** @type {?} */
        const key = url.slice(url.lastIndexOf("/") + 1);
        if (this._loadedLibraries[key]) {
            return this._loadedLibraries[key].asObservable();
        }
        this._loadedLibraries[key] = new ReplaySubject();
        /** @type {?} */
        const library = document.createElement(type === "script" ? "script" : "link");
        if (type === "script") {
            library.type = "text/javascript";
            ((/** @type {?} */ (library))).src = url;
        }
        else {
            library.type = "text/css";
            ((/** @type {?} */ (library))).rel = "stylesheet";
            ((/** @type {?} */ (library))).href = url;
        }
        library.onload = (/**
         * @return {?}
         */
        () => {
            this._loadedLibraries[key].next();
            this._loadedLibraries[key].complete();
        });
        document.body.appendChild(library);
        return this._loadedLibraries[key].asObservable();
    }
}
LazyLoadService.decorators = [
    { type: Injectable, args: [{
                providedIn: "root",
            },] }
];
/** @nocollapse */ LazyLoadService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function LazyLoadService_Factory() { return new LazyLoadService(); }, token: LazyLoadService, providedIn: "root" });
if (false) {
    /** @type {?} */
    LazyLoadService.prototype._loadedLibraries;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF6eS1sb2FkLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtc2xpY2tqcy8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9sYXp5LWxvYWQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFVLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQWMsYUFBYSxFQUFFLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7QUFLckQsTUFBTSxPQUFPLGVBQWU7SUFINUI7UUFJRSxxQkFBZ0IsR0FBMkMsRUFBRSxDQUFDO0tBaUMvRDs7Ozs7O0lBL0JDLElBQUksQ0FBQyxHQUFXLEVBQUUsSUFBd0I7UUFDeEMsSUFBSSxDQUFDLEdBQUc7WUFBRSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQzs7Y0FDcEIsR0FBRyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFL0MsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDOUIsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDbEQ7UUFFRCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxhQUFhLEVBQUUsQ0FBQzs7Y0FFM0MsT0FBTyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQ3BDLElBQUksS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUN0QztRQUNELElBQUksSUFBSSxLQUFLLFFBQVEsRUFBRTtZQUNyQixPQUFPLENBQUMsSUFBSSxHQUFHLGlCQUFpQixDQUFDO1lBQ2pDLENBQUMsbUJBQUEsT0FBTyxFQUFxQixDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztTQUMxQzthQUFNO1lBQ0wsT0FBTyxDQUFDLElBQUksR0FBRyxVQUFVLENBQUM7WUFDMUIsQ0FBQyxtQkFBQSxPQUFPLEVBQW1CLENBQUMsQ0FBQyxHQUFHLEdBQUcsWUFBWSxDQUFDO1lBQ2hELENBQUMsbUJBQUEsT0FBTyxFQUFtQixDQUFDLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQztTQUN6QztRQUVELE9BQU8sQ0FBQyxNQUFNOzs7UUFBRyxHQUFHLEVBQUU7WUFDcEIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ2xDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUN4QyxDQUFDLENBQUEsQ0FBQztRQUVGLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRW5DLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ25ELENBQUM7OztZQXBDRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7Ozs7O0lBRUMsMkNBQThEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IE9ic2VydmFibGUsIFJlcGxheVN1YmplY3QsIG9mIH0gZnJvbSBcInJ4anNcIjtcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiBcInJvb3RcIixcbn0pXG5leHBvcnQgY2xhc3MgTGF6eUxvYWRTZXJ2aWNlIHtcbiAgX2xvYWRlZExpYnJhcmllczogeyBbdXJsOiBzdHJpbmddOiBSZXBsYXlTdWJqZWN0PHZvaWQ+IH0gPSB7fTtcblxuICBsb2FkKHVybDogc3RyaW5nLCB0eXBlOiBcInNjcmlwdFwiIHwgXCJzdHlsZVwiKTogT2JzZXJ2YWJsZTx2b2lkPiB7XG4gICAgaWYgKCF1cmwpIHJldHVybiBvZihudWxsKTtcbiAgICBjb25zdCBrZXkgPSB1cmwuc2xpY2UodXJsLmxhc3RJbmRleE9mKFwiL1wiKSArIDEpO1xuXG4gICAgaWYgKHRoaXMuX2xvYWRlZExpYnJhcmllc1trZXldKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbG9hZGVkTGlicmFyaWVzW2tleV0uYXNPYnNlcnZhYmxlKCk7XG4gICAgfVxuXG4gICAgdGhpcy5fbG9hZGVkTGlicmFyaWVzW2tleV0gPSBuZXcgUmVwbGF5U3ViamVjdCgpO1xuXG4gICAgY29uc3QgbGlicmFyeSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXG4gICAgICB0eXBlID09PSBcInNjcmlwdFwiID8gXCJzY3JpcHRcIiA6IFwibGlua1wiXG4gICAgKTtcbiAgICBpZiAodHlwZSA9PT0gXCJzY3JpcHRcIikge1xuICAgICAgbGlicmFyeS50eXBlID0gXCJ0ZXh0L2phdmFzY3JpcHRcIjtcbiAgICAgIChsaWJyYXJ5IGFzIEhUTUxTY3JpcHRFbGVtZW50KS5zcmMgPSB1cmw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxpYnJhcnkudHlwZSA9IFwidGV4dC9jc3NcIjtcbiAgICAgIChsaWJyYXJ5IGFzIEhUTUxMaW5rRWxlbWVudCkucmVsID0gXCJzdHlsZXNoZWV0XCI7XG4gICAgICAobGlicmFyeSBhcyBIVE1MTGlua0VsZW1lbnQpLmhyZWYgPSB1cmw7XG4gICAgfVxuXG4gICAgbGlicmFyeS5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICB0aGlzLl9sb2FkZWRMaWJyYXJpZXNba2V5XS5uZXh0KCk7XG4gICAgICB0aGlzLl9sb2FkZWRMaWJyYXJpZXNba2V5XS5jb21wbGV0ZSgpO1xuICAgIH07XG5cbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGxpYnJhcnkpO1xuXG4gICAgcmV0dXJuIHRoaXMuX2xvYWRlZExpYnJhcmllc1trZXldLmFzT2JzZXJ2YWJsZSgpO1xuICB9XG59XG4iXX0=