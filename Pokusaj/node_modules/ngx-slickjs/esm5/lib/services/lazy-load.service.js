/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from "@angular/core";
import { ReplaySubject, of } from "rxjs";
import * as i0 from "@angular/core";
var LazyLoadService = /** @class */ (function () {
    function LazyLoadService() {
        this._loadedLibraries = {};
    }
    /**
     * @param {?} url
     * @param {?} type
     * @return {?}
     */
    LazyLoadService.prototype.load = /**
     * @param {?} url
     * @param {?} type
     * @return {?}
     */
    function (url, type) {
        var _this = this;
        if (!url)
            return of(null);
        /** @type {?} */
        var key = url.slice(url.lastIndexOf("/") + 1);
        if (this._loadedLibraries[key]) {
            return this._loadedLibraries[key].asObservable();
        }
        this._loadedLibraries[key] = new ReplaySubject();
        /** @type {?} */
        var library = document.createElement(type === "script" ? "script" : "link");
        if (type === "script") {
            library.type = "text/javascript";
            ((/** @type {?} */ (library))).src = url;
        }
        else {
            library.type = "text/css";
            ((/** @type {?} */ (library))).rel = "stylesheet";
            ((/** @type {?} */ (library))).href = url;
        }
        library.onload = (/**
         * @return {?}
         */
        function () {
            _this._loadedLibraries[key].next();
            _this._loadedLibraries[key].complete();
        });
        document.body.appendChild(library);
        return this._loadedLibraries[key].asObservable();
    };
    LazyLoadService.decorators = [
        { type: Injectable, args: [{
                    providedIn: "root",
                },] }
    ];
    /** @nocollapse */ LazyLoadService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function LazyLoadService_Factory() { return new LazyLoadService(); }, token: LazyLoadService, providedIn: "root" });
    return LazyLoadService;
}());
export { LazyLoadService };
if (false) {
    /** @type {?} */
    LazyLoadService.prototype._loadedLibraries;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF6eS1sb2FkLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtc2xpY2tqcy8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9sYXp5LWxvYWQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFVLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQWMsYUFBYSxFQUFFLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7QUFFckQ7SUFBQTtRQUlFLHFCQUFnQixHQUEyQyxFQUFFLENBQUM7S0FpQy9EOzs7Ozs7SUEvQkMsOEJBQUk7Ozs7O0lBQUosVUFBSyxHQUFXLEVBQUUsSUFBd0I7UUFBMUMsaUJBOEJDO1FBN0JDLElBQUksQ0FBQyxHQUFHO1lBQUUsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7O1lBQ3BCLEdBQUcsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRS9DLElBQUksSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQzlCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDLFlBQVksRUFBRSxDQUFDO1NBQ2xEO1FBRUQsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksYUFBYSxFQUFFLENBQUM7O1lBRTNDLE9BQU8sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUNwQyxJQUFJLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FDdEM7UUFDRCxJQUFJLElBQUksS0FBSyxRQUFRLEVBQUU7WUFDckIsT0FBTyxDQUFDLElBQUksR0FBRyxpQkFBaUIsQ0FBQztZQUNqQyxDQUFDLG1CQUFBLE9BQU8sRUFBcUIsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7U0FDMUM7YUFBTTtZQUNMLE9BQU8sQ0FBQyxJQUFJLEdBQUcsVUFBVSxDQUFDO1lBQzFCLENBQUMsbUJBQUEsT0FBTyxFQUFtQixDQUFDLENBQUMsR0FBRyxHQUFHLFlBQVksQ0FBQztZQUNoRCxDQUFDLG1CQUFBLE9BQU8sRUFBbUIsQ0FBQyxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7U0FDekM7UUFFRCxPQUFPLENBQUMsTUFBTTs7O1FBQUc7WUFDZixLQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDbEMsS0FBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3hDLENBQUMsQ0FBQSxDQUFDO1FBRUYsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFbkMsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDbkQsQ0FBQzs7Z0JBcENGLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7OzswQkFMRDtDQXdDQyxBQXJDRCxJQXFDQztTQWxDWSxlQUFlOzs7SUFDMUIsMkNBQThEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IE9ic2VydmFibGUsIFJlcGxheVN1YmplY3QsIG9mIH0gZnJvbSBcInJ4anNcIjtcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiBcInJvb3RcIixcbn0pXG5leHBvcnQgY2xhc3MgTGF6eUxvYWRTZXJ2aWNlIHtcbiAgX2xvYWRlZExpYnJhcmllczogeyBbdXJsOiBzdHJpbmddOiBSZXBsYXlTdWJqZWN0PHZvaWQ+IH0gPSB7fTtcblxuICBsb2FkKHVybDogc3RyaW5nLCB0eXBlOiBcInNjcmlwdFwiIHwgXCJzdHlsZVwiKTogT2JzZXJ2YWJsZTx2b2lkPiB7XG4gICAgaWYgKCF1cmwpIHJldHVybiBvZihudWxsKTtcbiAgICBjb25zdCBrZXkgPSB1cmwuc2xpY2UodXJsLmxhc3RJbmRleE9mKFwiL1wiKSArIDEpO1xuXG4gICAgaWYgKHRoaXMuX2xvYWRlZExpYnJhcmllc1trZXldKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbG9hZGVkTGlicmFyaWVzW2tleV0uYXNPYnNlcnZhYmxlKCk7XG4gICAgfVxuXG4gICAgdGhpcy5fbG9hZGVkTGlicmFyaWVzW2tleV0gPSBuZXcgUmVwbGF5U3ViamVjdCgpO1xuXG4gICAgY29uc3QgbGlicmFyeSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXG4gICAgICB0eXBlID09PSBcInNjcmlwdFwiID8gXCJzY3JpcHRcIiA6IFwibGlua1wiXG4gICAgKTtcbiAgICBpZiAodHlwZSA9PT0gXCJzY3JpcHRcIikge1xuICAgICAgbGlicmFyeS50eXBlID0gXCJ0ZXh0L2phdmFzY3JpcHRcIjtcbiAgICAgIChsaWJyYXJ5IGFzIEhUTUxTY3JpcHRFbGVtZW50KS5zcmMgPSB1cmw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxpYnJhcnkudHlwZSA9IFwidGV4dC9jc3NcIjtcbiAgICAgIChsaWJyYXJ5IGFzIEhUTUxMaW5rRWxlbWVudCkucmVsID0gXCJzdHlsZXNoZWV0XCI7XG4gICAgICAobGlicmFyeSBhcyBIVE1MTGlua0VsZW1lbnQpLmhyZWYgPSB1cmw7XG4gICAgfVxuXG4gICAgbGlicmFyeS5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICB0aGlzLl9sb2FkZWRMaWJyYXJpZXNba2V5XS5uZXh0KCk7XG4gICAgICB0aGlzLl9sb2FkZWRMaWJyYXJpZXNba2V5XS5jb21wbGV0ZSgpO1xuICAgIH07XG5cbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGxpYnJhcnkpO1xuXG4gICAgcmV0dXJuIHRoaXMuX2xvYWRlZExpYnJhcmllc1trZXldLmFzT2JzZXJ2YWJsZSgpO1xuICB9XG59XG4iXX0=